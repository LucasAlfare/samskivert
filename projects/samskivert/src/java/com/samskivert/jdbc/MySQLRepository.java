//
// $Id: MySQLRepository.java,v 1.8 2001/08/11 22:43:28 mdb Exp $
//
// samskivert library - useful routines for java programs
// Copyright (C) 2001 Michael Bayne
// 
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2.1 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

package com.samskivert.jdbc;

import java.sql.*;
import java.util.Properties;

/**
 * The MySQL repository class provides functionality useful to repository
 * implementations that make use of MySQL as their underlying database.
 */
public abstract class MySQLRepository extends Repository
{
    /**
     * Constructs a MySQL repository implementation with the supplied
     * configuration properties.
     */
    public MySQLRepository (Properties props)
	throws SQLException
    {
	super(props);
    }

    /**
     * @return the most recent ID generated by an insert into an
     * AUTO_INCREMENT table.
     */
    protected int lastInsertedId ()
	throws SQLException
    {
        // make sure we've got a connection
        ensureConnection();

	// we have to do this by hand. alas all is not roses.
	Statement stmt = _session.connection.createStatement();
	ResultSet rs = stmt.executeQuery("select LAST_INSERT_ID()");
	if (rs.next()) {
	    return rs.getInt(1);
	} else {
	    return -1;
	}
    }

    /**
     * Determines whether or not the supplied SQL exception originated
     * from a duplicate row error.
     *
     * @return true if the exception was thrown because a duplicate row
     * was inserted into a table that does not allow such things, false if
     * the exception is not related to duplicate rows.
     */
    protected boolean isDuplicateRowException (SQLException sqe)
    {
	String msg = sqe.getMessage();
	return (msg != null && msg.indexOf("Duplicate entry") != -1);
    }

    /**
     * Determines whether or not the supplied SQL exception is a transient
     * failure, meaning one that is not related to the SQL being executed,
     * but instead to the environment at the time of execution, like the
     * connection to the database having been lost.
     *
     * @return true if the exception was thrown due to a transient
     * failure, false if not.
     */
    protected boolean isTransientException (SQLException sqe)
    {
	String msg = sqe.getMessage();
	return (msg != null &&
                (msg.indexOf("Lost connection") != -1 ||
                 msg.indexOf("Broken pipe") != -1));
    }
}
